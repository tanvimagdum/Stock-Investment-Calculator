
Project Setup Assignment 7

ProjectSetup folder contains .jar file along with the structure required to run the Assignment

1. Place the generated Assignment7.jar file in any folder
2. Place another 3 folders data, portfolios, src, flexible_portfolios, strategy
3. data folder contains Symbol_List.txt which are the set of stocks used in the Assignment6.
4. portfolios folder is used to store the portfolios generated by the program to examine & evaluate the stocks.
5. src folder contains config.properties that contains the configurations used in our Assignment7.
6. strategy folder contains dollarCostAveraging.json file
7. flexible_portfolios folder is used to store the portfolios generated by the program to examine, evaluate the stocks,
   generate performance graph, buy & sell shares and cost basis.

Libraries used in the Assignment 7

Following are the Maven dependency used in the Assignment

1. org.apache.directory.studio:org.apache.commons.io:2.4
2. com.fasterxml.jackson.core:jackson-core:2.13.3
3. com.fasterxml.jackson.core:jackson-annotations:2.13.3
4. com.fasterxml.jackson.core:jackson-databind:2.13.3
5. com.google.code.gson:gson:2.10
6. com.googlecode.json-simple:json-simple:1.1.1
7. org.swinglabs:swingx:1.6.1

Steps to install the libraries

In the project structure, go the libraries tab present in project settings, click on the `+` symbol to add the library.
Choose `From Maven` option and use the above maven dependency name to add the libraries one by one.

Running the Project for Assignment 7

1. Open the terminal inside the folder that contains Assignment7.jar, data, portfolios, src, flexible_portfolios, strategy
(Note that the .jar should run from where it is in the assignment 7 folder)
2. Execute the java command to run the executable jar file

For Swing View
'java -jar Assignment6.jar Swing'

For Text View
'java -jar Assignment6.jar Text'

To run from IntelliJ, you must edit the run configuration when running PortfolioMain (which has the main method)
so that the argument line either reads 'Text' or 'Swing' for the text ui and gui respectively.



Features Completed in Assignment 7:
1. Rebalancing flexible portfolios through the Text UI
2. Rebalancing flexible portfolios through the GUI

(WARNING: some other functions not written by us (that is, written by the original authors)
do not work properly, including sales under certain conditions. One should be able to create a portfolio
and rebalance it though, through both UI's).



Changes:
1. Edited 'FileIOImpl.java' method 'writeFileData'
  to include code removing incompatible future sales (based on professor's piazza response @1344
2. Added public method 'rebalanceSell' to 'FlexiblePortfolio.java' and its implementation
  to offer alternative method of making a sale (to use the code mentioned in #1)
3. Added private method 'rebalance' to 'FlexiblePortfolioControllerImpl.java', also an extra menu option
  to take in text input from the user relating to rebalancing (date, weights, etc.) and applying the rebalance.
4. Added public methods 'rebalancePortfolioChoice', 'validatePortfolio', 'saveShares', 'validateShare',
  and 'rebalancePortfolio' to 'SwingController.java' and its implementation
  to handle taking, validating, and applying information relating to rebalancing portfolios through the GUI
5. Added public methods 'clearSelectPortfolioFields', 'clearRebalanceFields', 'selectPortfolioPanel',
  'displayRebalancePanel', and 'setControllerStuff' to 'SwingView.java' and its implementation
  to handle feeding data to the controller for validation and application when rebalancing portfolios